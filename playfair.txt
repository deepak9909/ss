To Implement Playfair Cipher using Python

def generate_key_table(key):
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"  # J is usually merged with I in Playfair
    key = key.upper().replace("J", "I")
    table = []
    used_chars = set()

    for char in key:
        if char not in used_chars and char.isalpha():
            table.append(char)
            used_chars.add(char)

    for char in alphabet:
        if char not in used_chars:
            table.append(char)
            used_chars.add(char)

    return [table[i:i + 5] for i in range(0, 25, 5)]


def prepare_text(text, is_encrypting=True):
    text = text.upper().replace("J", "I").replace(" ", "")
    prepared_text = ""
    i = 0

    while i < len(text):
        if i + 1 < len(text) and text[i] == text[i + 1]:
            prepared_text += text[i] + "X"
            i += 1
        else:
            prepared_text += text[i]
            i += 1

    if len(prepared_text) % 2 != 0:
        prepared_text += "X"

    return prepared_text


def find_position(char, table):
    for row in range(5):
        for col in range(5):
            if table[row][col] == char:
                return row, col


def playfair_encrypt(plaintext, key):
    table = generate_key_table(key)
    plaintext = prepare_text(plaintext)
    ciphertext = ""

    for i in range(0, len(plaintext), 2):
        char1, char2 = plaintext[i], plaintext[i + 1]
        row1, col1 = find_position(char1, table)
        row2, col2 = find_position(char2, table)

        if row1 == row2:  # Same row
            ciphertext += table[row1][(col1 + 1) % 5]
            ciphertext += table[row2][(col2 + 1) % 5]
        elif col1 == col2:  # Same column
            ciphertext += table[(row1 + 1) % 5][col1]
            ciphertext += table[(row2 + 1) % 5][col2]
        else:  # Rectangle
            ciphertext += table[row1][col2]
            ciphertext += table[row2][col1]

    return ciphertext


def playfair_decrypt(ciphertext, key):
    table = generate_key_table(key)
    plaintext = ""

    for i in range(0, len(ciphertext), 2):
        char1, char2 = ciphertext[i], ciphertext[i + 1]
        row1, col1 = find_position(char1, table)
        row2, col2 = find_position(char2, table)

        if row1 == row2:  # Same row
            plaintext += table[row1][(col1 - 1) % 5]
            plaintext += table[row2][(col2 - 1) % 5]
        elif col1 == col2:  # Same column
            plaintext += table[(row1 - 1) % 5][col1]
            plaintext += table[(row2 - 1) % 5][col2]
        else:  # Rectangle
            plaintext += table[row1][col2]
            plaintext += table[row2][col1]

    return plaintext


# Take inputs from the user
key = input("Enter the key: ").strip()
plaintext = input("Enter the plaintext: ").strip()

# Encrypt and decrypt
ciphertext = playfair_encrypt(plaintext, key)
decrypted_text = playfair_decrypt(ciphertext, key)

# Display results
print("\nKey:", key)
print("Plaintext:", plaintext)
print("Encrypted Text:", ciphertext)
print("Decrypted Text:", decrypted_text)
