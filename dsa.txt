Implemetation of DSA(Digital Signature Algorithm)

from cryptography.hazmat.primitives.asymmetric import dsa
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import utils
from cryptography.hazmat.backends import default_backend

# Generate a DSA key pair
def generate_dsa_keypair():
    private_key = dsa.generate_private_key(key_size=2048, backend=default_backend())
    public_key = private_key.public_key()
    return private_key, public_key

# Sign a message
def sign_message(private_key, message):
    message_bytes = message.encode('utf-8')
    signature = private_key.sign(message_bytes, hashes.SHA256())
    return signature

# Verify a signature
def verify_signature(public_key, message, signature):
    message_bytes = message.encode('utf-8')
    try:
        public_key.verify(signature, message_bytes, hashes.SHA256())
        return True
    except Exception:
        return False

# Example usage
if __name__ == "__main__":
    # Generate key pair
    private_key, public_key = generate_dsa_keypair()

    # Message to be signed
    message = input("Enter the message to sign: ")

    # Sign the message
    signature = sign_message(private_key, message)
    print(f"Signature: {signature.hex()}")

    # Verify the signature
    is_valid = verify_signature(public_key, message, signature)
    print(f"Is the signature valid? {is_valid}")
